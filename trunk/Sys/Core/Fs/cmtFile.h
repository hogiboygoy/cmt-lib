//==============================================================================
//              Cooperative MultiTasking system
//                    CMT system
// By Alexander Sibilev
//==============================================================================
#include <string.h>

struct CmtEvent;

//! Абстрактный файл с возможностью последовательного и произвольного доступа
class CmtFile {
  public:
    CmtEvent *mBreak; //!< Событие, которое прерывает файловую операцию

    CmtFile() : mBreak(0) {}

    //Блочный ввод-вывод
    //! Читает блок данных заданного размера в буфер
    /*! Выполняет чтение блока данных из файла по текущему указателю
      при этом указатель сдвигается на размер прочитанных байтов.
      \param dest указатель на буфер для чтения данных
      \param size размер блока данных */
    virtual void  Read( pvoid dest, uint32 size )  { memset( dest, 0, size ); }
    
    //! Пишет блок данных заданного размера из буфера в файл
    /*! Выполняет запись блока данных в файл по текущему указателю
      при этом указатель сдвигается на размер записанных данных.
      \param src указатель на записываемые данные
      \param size размер блока данных */
    virtual void  Write( cpvoid src, uint32 size ) { }
    
    //Доступ к буферу данных
    //! Возвращает буфер данных для чтения
    /*! Проверяет возможность прямого чтения из буфера и возвращает
      указатель на буфер. Указатель файла сдвигается на размер читаемых данных.
      В случае невозможности доступа к буферу возвращает нуль.
      \param size размер считываемых данных
      \return указатель на буфер данных для чтения или нуль, если невозможен доступ к буферу указанного размера */
    virtual const uint8 *GetRead( uint32 size ) { return 0; }
    
    //! Возвращает буфер данных для записи
    /*! Проверяет возможность прямой записи в буфер и возвращает
      указатель на буфер. Указатель файла сдвигается на размер записываемых данных.
      В случае невозможности доступа к буферу возвращается нуль.
      \param size размер записываемых данных
      \return указатель на буфер данных для записи или нуль, если невозможен доступ к буферу указанного размера */
    virtual uint8* GetWrite( uint32 size ) { return 0; }
    
    //Проверка
    //! Возвращает состояние файла (возможность производить операции)
    virtual bool Good() { return true; }
    
    //Позиционирование
    //! Модифицирует указатель файла (относительно)
    virtual void Skeep( int32 offset ) {}

    //! Устанавливает новое положение указателя файла
    virtual void Seek( uint32 absPos ) {}
    
    //! Возвращает текущее положение указателя файла
    virtual uint32 GetPos() { return 0; }
    
    //! Возвращает размер файла
    virtual uint32 Size() { return 0; }
    
    //! Возвращает истину когда указатель стоит в конце файла
    bool Eof() { return GetPos() == Size(); }
    
    //! Запись
    void WriteBinU8( uint8 val ) { Write( &val, 1 ); }
    
    void WriteBinU16( uint16 val ) { Write( &val, 2 ); }
    
    void WriteBinU32( uint32 val ) { Write( &val, 4 ); }

    void WriteBinI8( int8 val ) { Write( &val, 1 ); }
    
    void WriteBinI16( int16 val ) { Write( &val, 2 ); }
    
    void WriteBinI32( int32 val ) { Write( &val, 4 ); }
    
    //! Чтение
    uint8 ReadBinU8() { uint8 val; Read( &val, 1 ); return val; }
    
    uint16 ReadBinU16() { uint16 val; Read( &val, 2 ); return val; }
    
    uint32 ReadBinU32() { uint32 val; Read( &val, 4 ); return val; }

    int8   ReadBinI8() { int8 val; Read( &val, 1 ); return val; }
    
    int16  ReadBinI16() { int16 val; Read( &val, 2 ); return val; }
    
    int32  ReadBinI32() { int32 val; Read( &val, 4 ); return val; }
  };

//! Файл для чтения из константной строки
class CmtFileReadString : public CmtFile {
    const uint8 *mString; //!< Исходная строка
    uint32       mIndex;  //!< Текущий индекс чтения (указатель файла)
    uint32       mSize;   //!< Размер строки (включая нулевой символ)
  public:
    //! Конструктор из константной строки
    /*! Создает объект файл из константной строки
      \param str исходная строка, допускается нулевая строка */
    CmtFileReadString( cpchar str ) : CmtFile(), mString((const uint8*)str), mIndex(0), mSize(strlen(str) + 1) {}
    
    //! Конструктор из константного массива байтов
    /*! Создает объект файл из константного массива байтов
      \param str исходный массив байтов, допускается нулевой указатель */
    CmtFileReadString( const uint8 *str, uint32 size ) : CmtFile(), mString(str), mIndex(0), mSize(size) {}
    
    //Блочный ввод-вывод
    //! Читает блок данных заданного размера в буфер
    /*! Выполняет чтение блока данных из файла по текущему указателю
      при этом указатель сдвигается на размер прочитанных байтов.
      \param dest указатель на буфер для чтения данных
      \param size размер блока данных */
    virtual void  Read( pvoid dest, uint32 size ) {
      memcpy( dest, mString + mIndex, size );
      mIndex += size;
      }

    //Доступ к буферу данных
    //! Возвращает буфер данных для чтения
    /*! Проверяет возможность прямого чтения из буфера и возвращает
      указатель на буфер. Указатель файла сдвигается на размер читаемых данных.
      В случае невозможности доступа к буферу возвращает нуль.
      \param size размер считываемых данных
      \return указатель на буфер данных для чтения или нуль, если невозможен доступ к буферу указанного размера */
    virtual const uint8 *GetRead( uint32 size ) { 
      if( mIndex + size >= mSize ) return 0; 
      mIndex += size; 
      return mString + mIndex - size; 
      }

    //Проверка
    //! Возвращает состояние файла (возможность производить операции)
    virtual bool  Good() { return mIndex < mSize; }
    
    //Позиционирование
    //! Модифицирует указатель файла (относительно)
    virtual void Skeep( int32 offset ) { mIndex += offset; }

    //! Устанавливает новое положение указателя файла
    virtual void  Seek( uint32 absPos ) { mIndex = absPos; }
    
    //! Возвращает текущее положение указателя файла
    virtual uint32 GetPos() { return mIndex; }
    
    //! Возвращает размер файла
    virtual uint32 Size() { return mSize; }
  };

class CmtFileString : public CmtFile {
    uint8 *mString; //!< Буфер строки
    uint32 mIndex;  //!< Указатель файла
    uint32 mSize;   //!< Размер буфера
  public:
    CmtFileString( uint8 *str, uint32 size ) : CmtFile(), mString(str), mIndex(0), mSize(size) {}

    //Блочный ввод-вывод
    //! Читает блок данных заданного размера в буфер
    /*! Выполняет чтение блока данных из файла по текущему указателю
      при этом указатель сдвигается на размер прочитанных байтов.
      \param dest указатель на буфер для чтения данных
      \param size размер блока данных */
    virtual void  Read( pvoid dest, uint32 size )  {
      memcpy( dest, mString + mIndex, size );
      mIndex += size;
      }
    
    //! Пишет блок данных заданного размера из буфера в файл
    /*! Выполняет запись блока данных в файл по текущему указателю
      при этом указатель сдвигается на размер записанных данных.
      \param src указатель на записываемые данные
      \param size размер блока данных */
    virtual void  Write( cpvoid src, uint32 size ) {
      memcpy( mString + mIndex, src, size );
      mIndex += size;
      }
    
    //Доступ к буферу данных
    //! Возвращает буфер данных для чтения
    /*! Проверяет возможность прямого чтения из буфера и возвращает
      указатель на буфер. Указатель файла сдвигается на размер читаемых данных.
      В случае невозможности доступа к буферу возвращает нуль.
      \param size размер считываемых данных
      \return указатель на буфер данных для чтения или нуль, если невозможен доступ к буферу указанного размера */
    virtual const uint8 *GetRead( uint32 size ) { 
      if( mIndex + size >= mSize ) return 0; 
      mIndex += size; 
      return mString + mIndex - size; 
      }

    //! Возвращает буфер данных для записи
    /*! Проверяет возможность прямой записи в буфер и возвращает
      указатель на буфер. Указатель файла сдвигается на размер записываемых данных.
      В случае невозможности доступа к буферу возвращается нуль.
      \param size размер записываемых данных
      \return указатель на буфер данных для записи или нуль, если невозможен доступ к буферу указанного размера */
    virtual uint8* GetWrite( uint32 size ) {
      if( mIndex + size >= mSize ) return 0; 
      mIndex += size; 
      return mString + mIndex - size; 
      }

    //Проверка
    //! Возвращает состояние файла (возможность производить операции)
    virtual bool Good() { return mString && mIndex < mSize; }
    
    //Позиционирование
    //! Устанавливает новое положение указателя файла
    virtual void Seek( uint32 absPos ) { mIndex = absPos; }
    
    //! Возвращает текущее положение указателя файла
    virtual uint32 GetPos() { return mIndex; }
    
    //! Возвращает размер файла
    virtual uint32 Size() { return mSize; }
  };

#if defined(CMT_ARH_32BIT) || defined(CMT_ARH_64BIT)

class CmtFileMemory : public CmtFile {
    uint32 mIndex;
    uint32 mOffset;
  public:
    CmtFileMemory( uint32 offset ) : CmtFile(), mIndex(0), mOffset(0) {}
  
    //Символьный ввод-вывод    
    //! Читает один байт из файла
    /*! Выполняет чтение одного байта из файла по текущему указателю
      при этом указатель сдвигается на следующий байт. По умолчанию
      возвращает нулевые байты.
      \return прочитанный из потока байт */
    virtual uint8 Read8() { return *((uint8*)(mIndex++)); }
    
    //! Пишет один байт в файл
    /*! Выполняет запись одного байта в файл по текущему указателю
      при этом указатель сдвигается на следующий байт.
      \param val записываемый байт */
    virtual void  Write8( uint8 val ) { *((uint8*)(mIndex++)) = val; }
    
    //Блочный ввод-вывод
    //! Читает блок данных заданного размера в буфер
    /*! Выполняет чтение блока данных из файла по текущему указателю
      при этом указатель сдвигается на размер прочитанных байтов.
      \param dest указатель на буфер для чтения данных
      \param size размер блока данных */
    virtual void  Read( pvoid dest, uint32 size )  {
      memcpy( dest, (void*)mIndex, size );
      mIndex += size;
      }
    
    //! Пишет блок данных заданного размера из буфера в файл
    /*! Выполняет запись блока данных в файл по текущему указателю
      при этом указатель сдвигается на размер записанных данных.
      \param src указатель на записываемые данные
      \param size размер блока данных */
    virtual void  Write( cpvoid src, uint32 size ) {
      memcpy( (void*)mIndex, src, size );
      mIndex += size;
      }
    
    //Доступ к буферу данных
    //! Возвращает буфер данных для чтения
    /*! Проверяет возможность прямого чтения из буфера и возвращает
      указатель на буфер. Указатель файла сдвигается на размер читаемых данных.
      В случае невозможности доступа к буферу возвращает нуль.
      \param size размер считываемых данных
      \return указатель на буфер данных для чтения или нуль, если невозможен доступ к буферу указанного размера */
    virtual const uint8 *GetRead( uint32 size ) { mIndex += size; return (const uint8*)(mIndex - size); }

    //! Возвращает буфер данных для записи
    /*! Проверяет возможность прямой записи в буфер и возвращает
      указатель на буфер. Указатель файла сдвигается на размер записываемых данных.
      В случае невозможности доступа к буферу возвращается нуль.
      \param size размер записываемых данных
      \return указатель на буфер данных для записи или нуль, если невозможен доступ к буферу указанного размера */
    virtual uint8* GetWrite( uint32 size ) { mIndex += size; return (uint8*)(mIndex - size); }

    //Проверка
    //! Возвращает состояние файла (возможность производить операции)
    virtual bool Good() { return true; }
    
    //Позиционирование
    //! Модифицирует указатель файла (относительно)
    virtual void Skeep( int32 offset ) { mIndex += offset; }

    //! Устанавливает новое положение указателя файла
    virtual void Seek( uint32 absPos ) { mIndex = absPos - mOffset; }
    
    //! Возвращает текущее положение указателя файла
    virtual uint32 GetPos() { return mIndex + mOffset; }
    
    //! Возвращает размер файла
    virtual uint32 Size() { return ~mOffset; }    
  };
#endif
