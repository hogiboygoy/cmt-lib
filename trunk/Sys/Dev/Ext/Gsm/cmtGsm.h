//==============================================================================
//              Cooperative MultiTasking system
//                    CMT system
// By Alexander Sibilev
//==============================================================================

/** \defgroup GSM Управление модулем GSM
 *  @{
 */


#define CMT_GSM_EVENT      0x00200000 //! Возникло внешнее событие требующее обработки (например, нужно отправить SMS, связаться по GPRS, позвонить и т.п.)
#define CMT_GSM_LESS       0x00400000 //! Приход знака >
#define CMT_GSM_RECEIV     0x00800000 //! Принята строка и переписана в приемный буфер
#define CMT_GSM_MATCH0     0x01000000 //! Найден образец 0
#define CMT_GSM_MATCH1     0x02000000
#define CMT_GSM_MATCH2     0x04000000
#define CMT_GSM_MATCH3     0x08000000
#define CMT_GSM_MATCH4     0x10000000
#define CMT_GSM_MATCH5     0x20000000
#define CMT_GSM_MATCH6     0x40000000
#define CMT_GSM_MATCH7     0x80000000

//Операторы сотовых сетей
#define GSM_NO_CONNECT     CMTE_USER
#define GSM_OPER_BEELINE   CMTE_USER + 1 //! Би-Лайн
#define GSM_OPER_MEGAFON   CMTE_USER + 2
#define GSM_OPER_TELE2     CMTE_USER + 3
#define GSM_OPER_MTS       CMTE_USER + 4
#define GSM_OPER_OTHER     CMTE_USER + 5

//! Функция обратного вызова для модуля GSM - управление питанием
/*! \param on нуль - питание отключить, не нуль - питание подать */
typedef void (*CmtGsmPow)( uint_8 on );

#define CMT_GSM_RMAX       40          //! Размер буфера для принимаемой строки
#define CMT_GSM_MATCH_CNT  8           //! Количество шаблонов

//! Шаблон для сравнения принятых строк
struct CmtGsmMatch {
  cpchar mString; //!< Указатель на строку, содержащую шаблон
  uint_8 mLen;    //!< Длина сравниваемого фрагмента
  
  //! Сравнение строки с данным шаблоном
  /*! Сравнивает передаваемую строку с данным шаблоном
    \param sour строка для сравнения
    \return истина, если совпадает или ложь - в противном случае */
  bool compare( cpchar sour );
  };

//! GSM модуль
/*! Обеспечивает интерфейс к модулю GSM через последовательный порт с помощью AT-команд. Абстракция последовательного
  порта дает возможность использовать виртуальный порт. При программировании доступа к GSM нескольких задач должна использоваться блокировка Lock */
struct CmtGsm : public CmtDev {
  uint32         mEvent;               //!< Битовое поле событий
  CmtSerial     *mSerial;              //!< Порт приема информации
  CmtGsmPow      fnPower;              //!< Управление питанием (Обратного вызова) on нуль - питание отключить, не нуль - питание подать
  CmtGsmPow      fnPowKey;             //!< Управление выводом POWKEY (Обратного вызова) on - 0 на входе POWKEY логический нуль, 1 на входе POWKEY логическая единица
  CmtQueueUint8  mQueue;               //!< Приемная очередь команд
  uint8          mReceiv[CMT_GSM_RMAX];//!< Приемный буфер
  uint32         mRcIndex;             //!< Индекс байтов приемного буфера
  CmtGsmMatch    mMatch[CMT_GSM_MATCH_CNT]; //!< Ожидаемые шаблоны
  pchar          mDest;                //!< Буфер для приемной строки
  uint_8         mOperator;            //!< Код оператора GSM сети
  uint32         mTimeOut;             //!< Общий тайм-аут для исключения подвисания
  
  //! Конструктор
  /*! \param serial порт связи с модулем
    \param power функция обратного вызова для включения-отключения питания физического
    \param powkey функция обратного вызова для включения-отключения питания (управление выводом PowKey) */
  CmtGsm( CmtSerial *serial, CmtGsmPow power, CmtGsmPow powkey );
  
  //! Подать отрицательный импульс
  /*! Формирует на выводе POWKEY отрицательный импульс заданном длительности
    \param time длительность импульса */
  void  PowerKeyImpuls( uint32 time );
  
  //! Отправить блок данных модулю
  /*! Отправляет блок данных (строку) модулю. Размер данных определяется по завершающему символу.
    \param src передаваемая строка */
  void  Send( cpchar src );
  
  //! Проверяет принятую строку на соответствие имеющимся шаблонам
  void  MatchReceived();
  
  //! Включаем ожидание приема строки в буфер
  /*! Формирует задание на прием строки в заданный буфер. По завершении приема
    строки формируется событие CMT_GSM_RECEIV
    \param dst указатель на буфер для принимаемой строки */
  void  SetupWaitString( pchar dst );
  
  //! Задача обслуживания обмена с модулем по последовательному каналу
  /*! Осуществляет прием символов по последовательному каналу. Помещает
    принятый символ в буфер приема. Проверяет специальный символ завершения строки
    и знак >. При обнаружении символа конца строки закрывает строку, и сверяет ее
    с установленными шаблонами. При приеме символов также контролируется общая длина
    строки (чтобы она не превышала размер буфера) при превышении размера буфера,
    строка закрывается и сравнивается с шаблонами. Этот подход позволяет осуществлять
    прием сколь угодно длинных строк путем разбиения их на блоки ограниченной длины. */
  void  Task();
  
  //! Фиксирует шаблон для сравнения
  /*! Устанавливает строку в качестве шаблона с заданным индексом. Длина шаблона соответствует длине строки
    \param index индекс устанавливаемого шаблона
    \param str строка, используемая в качестве шаблона */
  void  Match( uint_8 index, cpchar str );
  
  //! Фиксирует шаблон для сравнения
  /*! Устанавливает строку в качестве шаблона с заданным индексом. Длина шаблона задается при вызове
    \param index индекс устанавливаемого шаблона
    \param str строка, используемая в качестве шаблона
    \param len длина строки, используемая в качестве шаблона (может быть меньше общей длины строки) */
  void  MatchStr( uint_8 index, cpchar str, uint_8 len );
  
  //! Фиксирует шаблон для сравнения в ячейку 0 и затем ожидает приема данного шаблона в течение заданного времени.
  /*! \param str строка, используемая в качестве шаблона
    \param timeOut тайм-аут, в течение которого от модуля ожидается приход строки, соответствующей шаблону
    \return истина, когда строка пришла или ложь если строка не пришла в течение заданного интервала */
  bool  Match0( cpchar str, uint32 timeOut );
  
  //! Отправляет строку в модуль и ожидает эхо отправленной строки в течение заданного времени
  /*! \param str отправляемая строка (команда)
    \param timeOut время, в течение которого ожидается эхо
    \return истина, когда это пришло в течение заданного времени, иначе ложь */
  bool  SendAndEcho( cpchar str, uint32 timeOut );
  
  //! Отправляет команду, проверяет эхо и ожидает ОК
  /*! \param str отправляемая команда
    \param timeOut время, в течение которого ожидается эхо и ответ ОК
    \return истина, когда после отправки команды приходит эхо и ответ ОК, ложь когда не приходит эхо или не приходит ОК */
  bool  Command( cpchar str, uint32 timeOut );
  
  //! Команда AT - проверка связи
  /*! Отправляет команду AT и ожидает ОК
    \param timeOut время для исполнения команды
    \return истина, когда команда исполняется, ложь в противном случае */
  bool  At( uint32 timeOut );
  
  //! Включение кнопкой PowerKey
  /*! Подает отрицательный импульс на вывод POWKEY 300 мс, затем подает серию команд AT для настройки скорости обмена.
    \return истина, когда есть ответ на команду AT, ложь когда в течение серии команд нет ответа от модуля */
  bool  PowKeyOn();
  
  //! Установка уровня громкости
  /*! \param level уровень громкости в процентах
    \return истина, когда заданный уровень установлен и ложь в противном случае */
  bool  SetVolumeLevel( int level );
  
  //! Установка режима "нормальный"
  /*! \return истина, когда нормальный режим установлен, ложь когда возникает ошибка в процессе такой установки */
  bool  SetNormalFun();
  
  //! Установить текстовый режим СМС
  /*! \return истина, когда текстовый режим СМС установлен, ложь когда возникает ошибка в процессе такой установки */
  bool  SetTextSMS();
  
  //! Проверка наличия SIM карты
  /*! \return истина, когда SIM карта имеется и исправна, ложь когда карты нет или ошибка в процессе определения наличия */
  bool  TestSimCard();
  
  //! Механизм ожидания строки Ready
  /*! Устанавливает в шаблон 7 строку CallReady */
  void  PrepareWaitReady();
  
  //! Ожидает строку Ready в течение заданного интервала
  /*! \return истина, когда строка пришла внутри интервала, ложь при истечении интервала */
  bool  WaitReady( uint32 timeOut );
  
  //! Подключение к сети
  /*! Проверяет наличие подключения к сети GSM и возвращает код оператора
    \return код оператора, к которому подключен модуль */
  uint_8 CheckNet();
  
  //! Подключиться к сети
  /*! Выполняет автоматическое подключение к любой сети
    \return истина, когда команда подключения прошла, ложь когда команда не прошла */
  bool  LinkNet();
  
  //! Поднять трубку для разговора
  /*! Поднимает трубку для разговора с абонентом
  \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  TubeOn();
  
  //! Положить трубку
  /*! Прекращает вызов, завершает разговор
  \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  TubeOff();
  
  
  //! Выполнить вызов абонента
  /*! Выполняет вызов абонента с заданным номером
    \param number строка с номером абонента
  \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  Call( cpchar number );
  
  //! Отправить SMS
  /*! Отправляет SMS по указанному номеру
    \param num строковое представление номера абонента
    \param text передаваемый текст (английский)
  \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  SendSMS( cpchar num, cpchar text );
  
  //! Запрос службы (например, запрос баланса)
  /*! Отправляет запрос (осуществляет вызов) по указанному номеру и
    получает ответ в буфер в течение заданного времени
    \param num номер абонента (службы)
    \param dest указатель на буфер, принимающий ответ на запрос
    \param timeOut время исполнения запроса
    \return истина, когда запрос успешно выполнен и в буфере находится ответ службы, ложь когда на каком-то этапе выполнения запроса возникла ошибка */
  bool  QueryService( cpchar num, pchar dest, uint32 timeOut );
  
  //! Получить статус GPRS
  /*! \return код состояния GPRS */
  uint_8   GprsStatus();
  
  //! Перевести GPRS в начальное состояние
  /*! \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  GprsShutDown();
  
  //! Подключение к сети GPRS
  /*! Осуществляет GPRS подключение к сети
    \param net наименование сети, к которой необходимо подключиться (параметры команды подключения)
    \return истина, когда подключение прошло успешно, ложь при возникновании ошибки на каком-либо этапе */
  bool  GprsCSTTQ( cpchar net );
  
  //! Вынос GPRS
  /*! \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  GprsCIICR();
  
  //! Получить IP
  /*! \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  GprsIP();
  
  //! Подключиться к серверу
  /*! Осуществляет подключение к серверу по каналу GPRS
    \param ip ip-адрес сервера, к которому необходимо подключиться
    \return истина, когда подключение прошло успешно, ложь при возникновании ошибки на каком-либо этапе */
  bool  GprsConnect( cpchar ip );
  
  //! Закрыть подключение
  /*! Закрывает открытое подключение к серверу
      \return истина, когда команда прошла, ложь когда команда не прошла */
  bool  GprsClose();
  
  
  
  //! Осуществить обмен по GPRS
  /*! Выполняет прием или передачу или вместе.
    \param src буфер данных для передачи
    \param dest буфер данных для приема
    \param destLen размер данных для приема
  \return истина - успешная операция и ложь в противном случае */
  bool GprsSend( cpchar src, pchar dest, uint32 destLen );
  
  //! Выполняет 6 попыток подключения
  /*! \return true успешное выполнение операции, ложь в противном случае */
  bool  ModuleOn();
  
  //! Программное отключение модуля
  /*! \return true успешное выполнение операции, ложь в противном случае */
  bool  ModuleOff();

  //! Подключение модуля к сети
  /*! Выполняются попытки подключения к сети в течение 1 часа, после чего фиксируется неуспех
    \return true успешное выполнение операции, ложь в противном случае */
  bool  ModuleNet();
  };

//! Задача обслуживания GSM порта, соответствующий порт передается задаче в виде параметра.
void cmtGsmTask();

/**@}*/
