//==============================================================================
//              Cooperative MultiTasking system
//                    CMT system
// By Alexander Sibilev
//==============================================================================

struct CmtDmaTransfer : public CmtTransfer {
  DMA_Channel_TypeDef *mDma;     //!< Аппаратный канал DMA
  DMA_InitTypeDef      mDmaInit; //!< Инициализация канала DMA
  uint32               mDmaFlag; //!< Индекс флага завершения обмена

  CmtDmaTransfer( DMA_Channel_TypeDef *dma, uint32 dmaFlag, uint32 periphAdr, bool dirToPeriph = true );

    //! Инициировать обмен
    /*! Настраивает обмен в соответствии с заданными параметрами и разрешает
      работу приемо-передатчика (приемо-передатчик входит в режим ожидания запроса)
      \param adr адрес обмена (источник или приемник, в зависимости от конфигурации канала)
      \param elemCount количество элементов во фрейме
      \param frameCount количество фреймов */
    virtual void   InitTransfer( void *adr, uint32 elemCount, uint32 frameCount );

    //! Ожидает завершения обмена
    /*! Ожидает завершения обмена с возможностью прекращения ожидания.
      \param pBreak указатель на событие, обеспечивающее прекращение ожидания. Возможен нулевой указатель,
      если прекращение ожидания не требуется.
      \return код ошибки, отражающий состояние завершенной операции */
    virtual uint_8 WaitTransfer( CmtEvent *pBreak = 0 );

    //! Прекращение обмена
    /*! Прекращает операцию. После этого вызова возможно повторное инициирование операции.
        *** В частном случае запрещает прерывания от приемника */
    virtual void   StopTransfer();

  };

