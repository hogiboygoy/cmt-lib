//==============================================================================
//              Cooperative MultiTasking system
//                    CMT system
// By Alexander Sibilev
//==============================================================================

#ifdef __cplusplus
//! Стек слов. Работает по принципу преддекремент (push), постинкремент (pop).
//! При достижении дна два алгоритма: с отказом и с исключением самого старого элемента.
class CmtStackUint32 {
  protected:
    uint32 *mBuf;   //!< Буфер элементов
    uint32  mTop;   //!< Верхушка стека
    uint32  mCount; //!< Максимальное количество элементов в стеке
  public:
    //! Конструктор
    /*! Конструктор стека
      \param size максимальное количество элементов в стеке */
    CmtStackUint32( uint32 size );
    
    //! Поместить значение в стек
    /*! Помещает значение в верхушку стека
      \param val размещаемое значение
      \return нуль при успешном размещении или не нуль когда нет места */
    uint_8  Push( uint32 val );
    
    //! Поместить значение в стек
    /*! Помещает значение в верхушку стека. При заполнении стека самое старое значение исключается
      \param val размещаемое значение */
    void    HardPush( uint32 val );

    //! Ожидать освобождения места в стеке и разместить
    /*! Ожидать освобождения места в стеке и разместить значение в верхушке стека
      \param val размещаемое значение */
    void    WaitAndPush( uint32 val );
    
    //! Ожидать наличия элементов в стеке и вернуть элемент с верхушки
    /*! Ожидать наличия элементов в очереди и вернуть элемент с верхушки
      \return очередной элемент с верхушки, при этом элемент удаляется */
    uint32  WaitAndPop();
    
    //! Элемент по заданному индексу от верхушки стека
    /*! Возвращает элемент по заданному индексу от верхушки стека. При этом извлечения не происходит.
      Контроль границ индекса не осуществляется!
      \param index индекс элемента
      \return элемент по заданному индексу */
    uint32  Look( uint32 index );
    
    //! Возвращает количество элементов в стеке
    /*! Возвращает количество элементов в стеке.
      \return количество элементов в стеке. */
    uint32  Count() const;
    
    //! Возвращает возможность размещения байта в очереди
    /*! Проверяет наличие свободного места в очереди и возвращает
      флаг состояния.
      \return CMTE_OK место в очереди есть, CMTE_FAIL места в очереди нет */
    uint_8 CanPlace() const;
    
    //! Удалить элементы из стека
    /*! Удаляет из стека заданное количество элементов.
      \param len количество удаляемых элементов */
    void   Remove( uint32 len );
    
    //! Сбросить стек
    void   Clear();
    
    //! Ожидать пока в стеке не станет элементов меньше или равно заданному
    /*! Ожидать пока в стеке не станет элементов меньше или равно заданному
      \param count количество элементов для ожидания
      \param timeOut тайм-аут ожидания
      \return нуль когда количество элементов в стеке меньше или равно заданному или
      не нуль при тайм-ауте */
    uint_8 WaitLE( uint32 count, uint32 timeOut );

    //! Ожидать пока в стеке не станет элементов больше или равно заданному
    /*! Ожидать пока в стеке не станет элементов больше или равно заданному
      \param count количество элементов для ожидания
      \param timeOut тайм-аут ожидания
      \return нуль когда количество элементов в стеке больше или равно заданному или
      не нуль при тайм-ауте */
    uint_8 WaitGE( uint32 count, uint32 timeOut );
  };

#endif
