//==============================================================================
//              Cooperative MultiTasking system
//                    CMT system
// By Alexander Sibilev
//==============================================================================

class CmtDma : public CmtDmaBase {
  protected:
    uint32 mDmaIndex;  //!< Индекс канала DMA
    bool   mSetSrc;    //!< Истина когда изменяется адрес источника
    bool   mNext;      //!< Показывает, что как минимум одна передача осуществлена
  public:
    //! Конструктор
    /*! Создает объект DMA канала, располагая его в канал index и задает изменяемый адрес источника или приемника
      \param index номер логического канала DMA
      \param setSrc истина, когда передача идет из произвольного источника в фиксированный приемник, ложь, когда
      передача идет из фиксированного источника в произвольный приемник (в устройство или из устройства соответственно)  */
    CmtDma( uint32 index, bool setSrc );

    //! Инициировать обмен
    /*! Настраивает обмен в соответствии с заданными параметрами и разрешает
      работу DMA (DMA входит в режим ожидания запроса)
      \param adr адрес обмена (источник или приемник, в зависимости от конфигурации канала)
      \param elemCount количество элементов во фрейме
      \param frameCount количество фреймов */
    virtual void   InitTransfer( void *adr, uint32 elemCount, uint32 frameCount );
    
    //! Ожидает завершения обмена
    /*! Ожидает завершения обмена с возможностью прекращения ожидания.
      \param pBreak указатель на событие, обеспечивающее прекращение ожидания. Возможен нулевой указатель,
      если прекращение ожидания не требуется.
      \return код ошибки, отражающий состояние завершенной операции */
    virtual uint_8 WaitTransfer( CmtEvent *pBreak = 0 );


    //! Завершение обмена
    /*! Выполняет операции по завершению обмена, если это требуется аппаратурой */
    virtual void   StopTransfer();
  };

